/* 
 * $Log: SiloLib_Write_UCD_Mesh.c-save,v $
 * Revision 1.1  2007/06/25 17:58:32  corey3
 * New Mili/Silo interface
 *
 * 
*/ 


/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
/*                                                              */
/*                   Copyright (c) 2005                         */
/*         The Regents of the University of California          */
/*                     All Rights Reserved                      */
/*                                                              */
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

/****************************************************************/
/*  Revision History                                            */
/*  ----------------                                            */
/*                                                              */
/*  18-Jan-2005  IRC  Initial version.                          */
/*                                                              */
/*  17-Apr-2007  IRC  Adapted for Mili                          */
/****************************************************************/

/*  Include Files  */

#include "silo.h"
#include "string.h"
#include "SiloLib_Internal.h"

int SiloLib_Write_UCD_Mesh_Brick(int    db_number,
				 char   *mesh_name,
				 int    group_num,
				 int    ndims,
				 int    *nodelist, 
				 int    nl_length,
				 char   **coord_names,
				 void   **coords,
				 int    nnodes,
				 int    nzones,
				 double time, 
				 double time_step,
				 int    cycle,
				 int    datatype)

/****************************************************************/
/*  This function will write out a UCD mesh for Brick elements  */
/* to the Silo file.                                            */
/*                                                              */
/****************************************************************/
/****************************************************************/
/*  Revision History                                            */
/*  ----------------                                            */
/*                                                              */
/*  20-Jan-2005  IRC  Initial version.                          */
/****************************************************************/
{
    int     i ;
    int     cell_index ;
    int     num_cells;
    int     num_points[3] ;
    int     dims_point[3] ;
    double  coord_init;

    float   *coord_arrays_flt[3];
    double  *coord_arrays_dbl[3];

    /* optlist variables */
    int        origin = 0 ;
    int        majororder = 0 ;
    int        hi[3]  = {0,0,0} ;
    int        low[3] = {0,0,0} ;
    int        coordsys;
    int        planar;
    DBoptlist *optlist;
    
    /* Zonelist variables */
    int shapetype[2], shapesize[2], shapecnt[2];

    if ( datatype==DB_FLOAT )
    {
         coord_arrays_flt[X] = (float *) coords[X];
         coord_arrays_flt[Y] = (float *) coords[Y];
         coord_arrays_flt[Z] = (float *) coords[Z];
    }
    else
    {
         coord_arrays_dbl[X] = (double *) coords[X];
         coord_arrays_dbl[Y] = (double *) coords[Y];
         coord_arrays_dbl[Z] = (double *) coords[Z];
    }
    

    /* Define nodal dimensions of mesh */
    dims_point[X] = num_points[X];
    dims_point[Y] = num_points[Y];
    dims_point[Z] = num_points[Z];
    
    /* Make quadvar option list */
    optlist = DBMakeOptlist(16) ;
    DBAddOption(optlist, DBOPT_GROUPNUM, (void *)&group_num) ;  
    DBAddOption(optlist, DBOPT_CYCLE, (void *)&cycle) ;        
    DBAddOption(optlist, DBOPT_TIME, (void *)&time) ; 
    DBAddOption(optlist, DBOPT_DTIME, (void *)&time_step) ; 
    DBAddOption(optlist, DBOPT_MAJORORDER, (void *)&majororder) ; 
    DBAddOption(optlist, DBOPT_ORIGIN, (void *)&origin) ; 
    DBAddOption(optlist, DBOPT_HI_OFFSET, (void *)&hi) ;
    DBAddOption(optlist, DBOPT_LO_OFFSET, (void *)&low) ;
    DBAddOption(optlist, DBOPT_XUNITS, "cm");
    DBAddOption(optlist, DBOPT_YUNITS, "cm");
    DBAddOption(optlist, DBOPT_ZUNITS, "cm");

    planar   = DB_AREA ;
    coordsys = DB_CARTESIAN ;
    DBAddOption(optlist, DBOPT_PLANAR, (void *)&planar) ;
    DBAddOption(optlist, DBOPT_COORDSYS, (void *)&coordsys) ;
    DBAddOption(optlist, DBOPT_XLABEL, "X Axis") ;
    DBAddOption(optlist, DBOPT_YLABEL, "Y Axis") ;
    DBAddOption(optlist, DBOPT_ZLABEL, "Z Axis") ;

    /* Write the zone list */
    DBPutUcdmesh(restart_file_pointer[db_number], 
		 mesh_name, ndims, coord_names,
		 coord_arrays_flt,
		 nnodes, nzones,
		 "Zones_Brick", NULL,
		 datatype, 
		 optlist) ;


    /* Write the Nodal Mesh */
    if ( datatype==DB_FLOAT )
    {
         DBPutUcdmesh(restart_file_pointer[db_number], 
		      mesh_name, 
		      ndims, 
		      coord_names,
		      (void *) coord_arrays_flt,
		      nnodes, nzones,
		      "Zones_Brick",
		      NULL,
		      datatype, 
		      optlist) ;
    }
    else
    {
         DBPutUcdmesh(restart_file_pointer[db_number], 
		      mesh_name, 
		      ndims, 
		      coord_names,
		      coord_arrays_dbl,
		      nnodes, nzones,
		      "Zones_Brick",
		      NULL,
		      datatype, 
		      optlist) ;
    }

    DBFreeOptlist(optlist);

    shapetype[0] = DB_ZONETYPE_HEX;
    shapesize[0] = 8;
    shapecnt[0]  = nzones;
    
    nzones = 2; nl_length = 16;

    /* Write the zone list */
    DBPutZonelist2(restart_file_pointer[db_number],
		   "Zones_Brick",
		   nzones,
		   ndims,
		   nodelist,
		   nl_length,
		   0,
		   0,
		   0,
		   shapetype,
		   shapesize,
		   shapecnt,
		   1,
		   NULL) ;

    return(1) ;
}  

/* End SiloLib_Write_UCD_Mesh.c */
