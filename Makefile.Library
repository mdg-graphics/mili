#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#                                                               #
#                      Copyright (c) 2004                       #
#         The Regents of the University of California           #
#                     All Rights Reserved                       #
#                                                               #
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
# The Regents of the University of California.
# All rights reserved.
# 
# This work was produced at the University of California, 
# Lawrence Livermore National Laboratory (UC LLNL) under 
# contract no. W-7405-ENG-48 between the U.S. Department of 
# Energy (DOE) and The Regents of the University of California
# (University) for   the operation of UC LLNL. Copyright is 
# reserved to the University for purposes of controlled dis-
# semination, commercialization through formal licensing, or 
# other disposition under terms of Contract 48; DOE policies, 
# regulations and orders; and U.S. statutes.
# 
# DISCLAIMER OF LIABILITY
# 
# This document was prepared as an account of work sponsored 
# by an agency of the United States Government.  Neither the 
# United States Government nor the University of California 
# nor any of their employees, makes any warranty, express
# or implied, including the warranties of merchantability
# and fitness for a particular purpose, or assumes any legal
# liability or responsibility for the accuracy, completeness,
# or usefulness of any information, apparatus, product, or 
# process disclosed, or represents that its use would not 
# infringe privately-owned rights.
# 
# DISCLAIMER OF ENDORSEMENT
# 
# Reference herein to any specific commercial products,
# process, or service by trade name, trademark, manufacturer,
# or otherwise, does not necessarily constitute or imply its
# endorsement, recommendation, or favoring by the United States
# Government or the University of California.  The views and 
# opinions of authors expressed herein do not necessarily state
# or reflect those of the United States Government or the 
# University of California, and shall not be used for advertising
# or product endorsement purposes.
#
#################################################################
#								#
#	           Mili Driver Makefile		                #
#								#
#################################################################
#
#################################################################
#  Revision History                                             #
#  ----------------                                             #
#  20-Feb-2006  EMP  CREATED                                    # 
#
#  05-Oct-06 IRC: Added a paths for SILO and HDF for future     #
#                 development                                   #
#################################################################
#
# Makefile - This is the makefile for Mili Libraries
#
# Mili_1.10.00 update:  Elsie Pierce
#               Lawrence Livermore National Laboratory

# Note: Updated Makefile for Mili sources. Made more general
#       so that it can be used for any platform. This Makefile
#       is called from a driver Makefile (Makefile.Driver).
#
# Copyright (c) 1992, Regents of the University of California
# Copyright (c) 1996, Regents of the University of California
# Copyright (c) 2004, Regents of the University of California
#
srcdir= @srcdir@
abs_srcdir= @abs_srcdir@
top_srcdir= @top_srcdir@
abs_top_srcdir= @abs_top_srcdir@
builddir= @builddir@
abs_builddir= @abs_builddir@
top_builddir= @top_builddir@
abs_top_builddir= @abs_top_builddir@

MILI_VERSION = @MILI_VERSION@

OS_NAME    = @OS_NAME@
SHELL      = @SHELL@
SHELL_ARGS = @SHELL_ARGS@
SRC_TEST_DIR	=	src_test
#

CC = @CC@ 
FC = @F77@

fortran ?= true

CONFIG_STRING=@CONFIG_OPTIONS@

INCLUDE_PATHS = @CC_INCLUDE_PATHS_MILI@
DEFINES       = @CC_DEFINES_MILI@
# CPPFLAGS    = @CC_DEFINES_MILI@ @CC_INCLUDE_PATHS_MILI@ -I$(top_builddir) -I$(SILO_INC_DIR) -I$(HDF_INC_DIR)
CPPFLAGS      = @CC_DEFINES_MILI@ @CC_INCLUDE_PATHS_MILI@ 
CC_FLAGS_DEBUG= @CC_FLAGS_DEBUG@
CC_FLAGS_OPT  = @CC_FLAGS_OPT@
CC_DEPEND     = @CC_DEPEND@ 
FC_FLAGS_DEBUG= @FC_FLAGS_DEBUG@
FC_FLAGS_OPT  = @FC_FLAGS_OPT@

# For UV add the following to the Load Line
# -blpdata
# LDFLAGS_EXTRA = -blpdata

MILIINC       = @MILI_INCLUDE_PATHS@
MILILIBPATH   = @MILI_LIBRARY_PATHS@
MILILIB       = @MILI_LIBRARY@

INSTALL_HOME  = @INSTALL_HOME@
PLATFORM_DIRS = @PLATFORM_DIRS@

#
# Silo Variables 
#
SILO_VERSION = @SILO_VERSION@
SILO_HOME    = @SILO_HOME@
SILO_LIB     = @SILO_LIB@
SILO_INC_DIR = @SILO_INC_DIR@
SILO_LIB_DIR = @SILO_LIB_DIR@

#
# HDF Variables 
#
HDF_HOME    = @HDF_HOME@
HDF_LIB     = @HDF_LIB@
HDF_INC_DIR = @HDF_INC_DIR@
HDF_LIB_DIR = @HDF_LIB_DIR@



# Suffix rule to create the object files.
# rules to automatically generate dependency makefiles
.SUFFIXES :
utils/%.o: utils/%.c
	$(PURIFY_CMD) $(CC) -Isrc $(CC_FLAGS) -o $@ $(CPPFLAGS) -c $<
  
$(OBJS_PATH)%.o: src/%.c
	$(PURIFY_CMD) $(CC) $(CC_FLAGS) -o $(OBJS_PATH)$@ $(CPPFLAGS) -c $<

$(OBJS_PATH)%.o: src/%.f
	$(PURIFY_CMD) $(FC) $(FC_FLAGS) -o $(OBJS_PATH)$@ $(CPPFLAGS) -c $<

$(OBJS_PATH)%.o: src/%.F
	$(PURIFY_CMD) $(FC) $(FC_FLAGS) -o $(OBJS_PATH)$@ $(CPPFLAGS) -c $<

# Set to location of MILI source.
MILIHOME = @MILI_HOME@

# Mili Objects
MILI_C_OBJS = \
    makemili.o \
    dep.o \
    direc.o \
    eprtf.o \
    gahl.o \
    io_mem.o \
    mesh_u.o \
    mili.o \
    param.o \
    partition.o \
    parson.o \
    read_db.o \
    svar.o \
    srec.o \
    sarray.o \
    sarray.o \
    ti.o \
    tidirc.o \
    util.o \
    wrap_c.o \
    write_db.o \
    mr_funcs.o


ifeq ($(fortran),true)                                                                                
MILI_f_OBJS = \
    f_util.o
                                                                                
MILI_F_OBJS = \
    wrap_f.o
endif

MILI_SILO_TEST_OBJS = silotest.o
MILI_SILO_UTIL      = silotest

UOBJS = utils/md.o utils/tipart.o utils/MiliReader.o utils/ti_strings.o utils/makemili_driver.o

XMOBJS = \
	utils/combine_db.o \
	utils/driver.o \
	utils/init_io.o \
	utils/io_funcs.o \
	utils/misc.o \
	utils/versioninfo.o \
	utils/process_ti.o


TOBJS = $(addprefix $(OBJS_PATH),   taurus_db.o taurus_mesh_u.o taurus_srec.o taurus_svars.o) 
LOBJS = $(addprefix $(OBJS_PATH),   eprtf.o) 
OBJS = $(addprefix $(OBJS_PATH), $(MILI_C_OBJS) $(MILI_f_OBJS) $(MILI_F_OBJS))

help:
ifdef VERBOSE
		@ echo "\nVerbose Mode"
endif
		@ echo "            ***************************"
		@ echo "            *                         *"
		@ echo "            *     Mili Makefile       *"
		@ echo "            *                         *"
		@ echo "            ***************************"
		@ echo "                Available Targets"
		@ echo "                -----------------"
		@ echo "      all:  Build the libraries."
		@ echo "      opt:  Build optimized Libraries."
		@ echo "    debug:  Build debug Libraries."
		@ echo " "
		@ echo "    Utilities:"
		@ echo "    utilsdebug: Build debug utilities such as md."
		@ echo "    utilsopt:   Build opt   utilities such as md."
		@ echo " "
		@ echo "    clean:      Remove object, core and library files for this build."
		@ echo "    distclean:  Restore build environment back to distribution state."
		@ echo "    clobber:    Remove everything in lib_ directories."
		@ echo " "
		@ echo "    installdirs: Create the public installation directories."
		@ echo "    install:     Put new code and documentation in public."
		@ echo "  "
		@ echo "    install-initversion: Create public directories for new Mili Version."
		@ echo "    install-chmod: Change file permissions in public."
		@ echo "    install-setversion: Define version link (miliversion) in public."
		@ echo "  "
		@ echo "    uninstall:   Remove code from public."
		@ echo "  "
		@ echo "                Available Options"
		@ echo "                -----------------"
		@ echo "    TASKS=  Number of processes for parallel builds."
		@ echo "  VERBOSE=  Verbose mode for echoing of build steps."
		@ echo "  fortran={true|false}  Choose whether to build the fortran interface "
		@ echo "                        or not. The default is true."


# Build Optimized Mili
opt:		CC_FLAGS  = @CC_FLAGS_OPT@
opt:		FC_FLAGS  = @FC_FLAGS_OPT@
opt:        LIB_PATH  = lib_opt/
opt:        OBJS_PATH = objs_opt/
opt:		mili_build

debug:		CC_FLAGS  = @CC_FLAGS_DEBUG@
debug:		FC_FLAGS  = @FC_FLAGS_DEBUG@
debug:      LIB_PATH  = lib_debug/
debug:      OBJS_PATH = objs_debug/
debug:		mili_build

utilsopt:	CC_FLAGS  = @CC_FLAGS_OPT@
utilsopt:	FC_FLAGS  = @FC_FLAGS_OPT@
utilsopt:   LIB_PATH  = lib_opt
utilsopt:   OBJS_PATH = objs_opt/
utilsopt:	mili_build 
utilsopt:	$(UOBJS)
utilsopt:	$(XMOBJS)
utilsopt:	MILI_UTILS_PATH = bin_utils_opt
utilsopt:   md tipart MiliReader ti_strings makemili_driver xmilics

utilsdebug:	CC_FLAGS  = @CC_FLAGS_DEBUG@
utilsdebug:	FC_FLAGS  = @FC_FLAGS_DEBUG@
utilsdebug: LIB_PATH  = lib_debug
utilsdebug: OBJS_PATH = objs_debug/
utilsopt:	mili_build 
utilsdebug:	$(UOBJS)
utilsdebug:	$(XMOBJS)
utilsdebug:	MILI_UTILS_PATH = bin_utils_debug
utilsdebug:	md tipart MiliReader ti_strings makemili_driver xmilics


mili_build: src/buildinfo.h libmili.a libtaurus.a libeprtf.a
  
libmili.a: $(OBJS)
		$(AR) $(ARFLAGS) $@ $(OBJS)
		mv $@ $(LIB_PATH)$(MILI_LIB)
    
libtaurus.a: $(TOBJS)
		$(AR) $(ARFLAGS) $@ $(TOBJS)
		mv $@ $(LIB_PATH)$(TAURUS_LIB)
    
libeprtf.a: $(LOBJS)
		$(AR) $(ARFLAGS) $@ $(LOBJS)
		mv $@ $(LIB_PATH)$(EPRTF_LIB)

tests:
		@	cd $(SRC_TEST_DIR); \
			$(MAKE) tests;

# Build Mili Utility Programs
xmilics: 
		$(CC) -o $(MILI_UTILS_PATH)/$@ $(CC_FLAGS) $(CPPFLAGS) \
		utils/combine_db.o utils/driver.o utils/init_io.o \
		utils/io_funcs.o utils/misc.o utils/versioninfo.o \
		utils/process_ti.o -L$(LIB_PATH) -lmili -ltaurus
        
makemili_driver:  
		$(CC) -o $(MILI_UTILS_PATH)/$@ $(CC_FLAGS) $(CPPFLAGS) utils/makemili_driver.o -L$(LIB_PATH) -lmili 

md:  
		$(CC) -o $(MILI_UTILS_PATH)/$@ $(CC_FLAGS) $(CPPFLAGS) utils/md.o -L$(LIB_PATH) -lmili 

ti_strings:  
		$(CC) -o $(MILI_UTILS_PATH)/$@ $(CC_FLAGS) $(CPPFLAGS) utils/ti_strings.o -L$(LIB_PATH) -lmili 


tipart: 
		$(CC) -o $(MILI_UTILS_PATH)/$@ $(CC_FLAGS) $(CPPFLAGS) utils/tipart.o -L$(LIB_PATH) -lmili 

MiliReader:  
		$(CC) -o $(MILI_UTILS_PATH)/$@ $(CC_FLAGS) $(CPPFLAGS) utils/MiliReader.o -L$(LIB_PATH) -lmili 

$(MILI_SILO_UTIL): $(MILI_SILO_OBJS) libmili.a
	  	   $(CC) -g -o $@ $(CC_FLAGS) $(CPPFLAGS) -L$(LIB_PATH) -lmili $(SILO_LIB_DIR) $(SILO_LIB) 
		   mv $@ ../bin_utils

src/buildinfo.h:    src/buildinfo
		$(RM) src/t.h
		./src/buildinfo > src/t.h
		mv src/t.h $@
                                                                               
src/buildinfo.o:    src/buildinfo.c
		$(CC) $(CC_FLAGS) $(CPPFLAGS) -o $@\
		 -DMILI_VERSION="\"$(MILI_VERSION)\"" \
		 -DCOMPILE_CMD="\"$(CC) $(CC_FLAGS) $(CPPFLAGS) \"" \
		 -DLINK_CMD="\"$(CC) $(CC_FLAGS) $(LDFLAGS_EXTRA) $(LIBS)\"" \
		 -DMAKE_CMD="\"$(MAKECMDGOALS)\"" \
		 -c src/buildinfo.c
                                                                               
src/buildinfo:      src/buildinfo.o
		$(CC) $(CC_FLAGS) $? -o $@ $(LDFLAGS_EXTRA)

clean:
	rm -f src/*.o src/*.so; \
	rm -f buildinfo buildinfo.h; \
	rm -f lib_opt/* objs_opt/*; \
	rm -f objs_opt/* objs_debug/*; \
	rm -f objs_test/* bin_test/*; \
	rm -f lib_debug/* lib_opt/*

clobber: clean
	rm -f *.o *.so so_locations; \
	rm -f src/buildinfo src/buildinfo.h;

distclean:


##################
# INSTALL TARGETS
# All of the targets below are used for installing the code in public
##################

install: install-initversion install-startmsg install-updatefont install-chmod install-setversion

install-initversion:
	@ for dir in $(PLATFORM_DIRS); do \
		echo " "; \
		cd $(INSTALL_HOME)/$$dir/archive/milidir; \
	if test -d $(MILI_VERSION); \
	           then \
		   echo "[$$dir] \t\t Mili directory exists for version $(MILI_VERSION)"; \
		   else \
		   echo "[$$dir] \t\t Creating Mili directory for version $(MILI_VERSION)"; \
	           mkdir $(MILI_VERSION); \
	           cd $(MILI_VERSION); \
                   mkdir Include Lib; \
	        fi; \
	done

install-setversion:
	@ for dir in $(PLATFORM_DIRS); do \
		echo " "; \
		echo "[$$dir] \t\t Setting new Mili Version to : $(MILI_VERSION)"; \
		cd $(INSTALL_HOME)/$$dir/archive/milidir/; \
		ln -sf $(MILI_VERSION) miliversion; \
		ls -l  $(MILI_VERSION) miliversion; \
	done

install-chmod:
	@ for dir in $(PLATFORM_DIRS); do \
		echo " "; \
		echo "[$$dir] \t\t Setting Mili permissions"; \
		cd $(INSTALL_HOME)/$$dir/archive/milidir; \
		if test -d $(MILI_VERSION); \
	           then \
	           chmod 770 $(MILI_VERSION); \
		   chmod -R 750 $(MILI_VERSION); \
		   chgrp -R mdgdev $(MILI_VERSION); \
	           else \
	           echo "[$$dir] \t\t Mili version $(MILI_VERSION) is missing"; \
	        fi; \
	done

uninstall:

ifneq ($(OS_NAME),Linux)
include $(OBJS:.o=.d)
endif

