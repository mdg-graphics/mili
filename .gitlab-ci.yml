workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"
      when: always
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /^(\[Draft\]|\(Draft\)|Draft:)/
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /^(\[Doc\]|\(Doc\)|Doc:)/
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: always  # Runs tests when changes are committed to main
    - when: never

include:
  - project: 'lc-templates/id_tokens'
    file: 'id_tokens.yml'

stages:
  - test
  - deploy

variables:
  GIT_SUBMODULE_STRATEGY: normal

.slurm-toss-4:
  variables:
    NNODES: 1
    NPROCS: 56
    QUEUE: pdebug
    INTEG_WALL_TIME: 5

.slurm:
  variables:
    LLNL_SLURM_SCHEDULER_PARAMETERS: "-N $NNODES -n $NPROCS -p $QUEUE -t $INTEG_WALL_TIME"

.build-mili-xmilics:
  variables:
    BUILD_SPEC: ${SYS_TYPE}-${COMPILER_SPEC}
  script:
    - configure.py
    - cd build-${BUILD_SPEC}-relwithdebinfo
    - make -j
    - cd -

.run-tests:
  script:
    - cd test/
    - mdgtest/RunTest.py -c ../build-${BUILD_SPEC}-relwithdebinfo -s all
    - any_mili_failed=$?
    - mdgtest/RunTest.py -c ../build-${BUILD_SPEC}-relwithdebinfo/bin/xmilics -s all
    - any_xmilics_failed=$?
    - any_failed=$(( $any_mili_failed + $any_xmilics_failed ))
    - echo "Any failed $any_failed"

.toss4:
  variables:
    SYS_TYPE: toss_4_x86_64_ib

.toss4-intel-classic:
  extends: .toss4
  variables:
    COMPILER_SPEC: intel_classic@2021.6.0
  before_script:
    - module load cmake/3.23.1
    - module load intel-classic/2021.6.0
    - module load python/3.9.12

toss4_intel_classic_slurm_mili:
  stage: test
  tags:
    - rzwhippet
    - slurm
    - batch
  extends:
    - .toss4-intel-classic
    - .slurm-toss-4
    - .slurm
    - .build-mili-xmilics
    - .deploy_to_github
  script:
    - !reference [ .build-mili-xmilics, script ]
    - !reference [ .run-tests, script ]

.deploy_to_github:
  stage: deploy
  script:
    - mkdir -p ~/.ssh
    - echo "$GITHUB_SSH_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - git clone git@github.com:username/repo.git
    - cd repo
    - git add .
    - git commit -m "Update from GitLab CI/CD"
    - git push origin main# Add your deployment commands here
  only:
    - main
  when: on_success